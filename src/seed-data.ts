import {
  createLevel,
  createUser,
  createMarketWithSubmarkets,
  createAsset,
  createGameInstance,
  createTransaction,
  createNotification,
  getUserStats,
  getAllUsers
} from './examples/user-operations'
import prisma from './database'

/**
 * Fonction pour cr√©er un jeu de donn√©es de test complet
 * Ex√©cutez: bun run src/seed-data.ts
 */
async function seedDatabase() {
  console.log('üå± Cr√©ation de donn√©es de test pour Cashou...')
  
  try {
    await prisma.$connect()
    
    // 1. Cr√©er un niveau
    console.log('1Ô∏è‚É£ Cr√©ation d\'un niveau...')
    const level = await createLevel(
      'Niveau D√©butant',
      1,
      3600, // 1 heure
      10000, // 10,000 de balance de d√©part
      1000, // 1,000 points requis
      'Premier niveau pour apprendre les bases du trading'
    )
    
    // 2. Cr√©er un utilisateur
    console.log('2Ô∏è‚É£ Cr√©ation d\'un utilisateur...')
    const user = await createUser(
      'trader_pro',
      'trader@example.com',
      level.id,
      'hashed_password_123'
    )
    
    // 3. Cr√©er un march√© avec des sous-march√©s
    console.log('3Ô∏è‚É£ Cr√©ation d\'un march√© financier...')
    const market = await createMarketWithSubmarkets(
      'March√© des Cryptomonnaies',
      'March√© principal pour les actifs num√©riques',
      [
        { name: 'Bitcoin & Altcoins', description: 'Principales cryptomonnaies' },
        { name: 'DeFi', description: 'Finance d√©centralis√©e' },
        { name: 'NFT', description: 'Tokens non fongibles' }
      ]
    )
    
    // 4. Cr√©er quelques actifs
    console.log('4Ô∏è‚É£ Cr√©ation d\'actifs...')
    const bitcoinAsset = await createAsset(
      'Bitcoin',
      'BTC',
      market.id,
      market.submarkets[0].id,
      'La premi√®re et plus connue des cryptomonnaies'
    )
    
    const ethereumAsset = await createAsset(
      'Ethereum',
      'ETH',
      market.id,
      market.submarkets[1].id,
      'Plateforme blockchain pour smart contracts'
    )
    
    // 5. Cr√©er une instance de jeu
    console.log('5Ô∏è‚É£ Cr√©ation d\'une instance de jeu...')
    const gameInstance = await createGameInstance(
      user.id,
      level.id,
      'simulation',
      10000
    )
    
    // 6. Simuler quelques transactions
    console.log('6Ô∏è‚É£ Simulation de transactions...')
    
    // R√©cup√©rer le wallet cr√©√© automatiquement
    const wallet = await prisma.wallet.findFirst({
      where: { gameInstanceId: gameInstance.id }
    })
    
    if (wallet) {
      await createTransaction(
        wallet.id,
        bitcoinAsset.id,
        gameInstance.id,
        'BUY',
        2, // Acheter 2 BTC
        45000 // √† 45,000 l'unit√©
      )
      
      await createTransaction(
        wallet.id,
        ethereumAsset.id,
        gameInstance.id,
        'BUY',
        10, // Acheter 10 ETH
        3000 // √† 3,000 l'unit√©
      )
    }
    
    // 7. Cr√©er une notification
    console.log('7Ô∏è‚É£ Cr√©ation d\'une notification...')
    await createNotification(
      user.id,
      'Bienvenue sur Cashou !',
      'Votre compte a √©t√© cr√©√© avec succ√®s. Commencez votre aventure trading !',
      'Profile'
    )
    
    // 8. Afficher les statistiques de l'utilisateur
    console.log('8Ô∏è‚É£ Statistiques de l\'utilisateur...')
    await getUserStats(user.id)
    
    console.log('\nüéâ Donn√©es de test cr√©√©es avec succ√®s !')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter seulement si ce fichier est appel√© directement
if (import.meta.main) {
  seedDatabase()
} 